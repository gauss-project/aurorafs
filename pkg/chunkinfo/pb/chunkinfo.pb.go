// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chunkinfo.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChunkPyramidReq struct {
	RootCid []byte `protobuf:"bytes,1,opt,name=RootCid,proto3" json:"RootCid,omitempty"`
	Target  []byte `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *ChunkPyramidReq) Reset()         { *m = ChunkPyramidReq{} }
func (m *ChunkPyramidReq) String() string { return proto.CompactTextString(m) }
func (*ChunkPyramidReq) ProtoMessage()    {}
func (*ChunkPyramidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_373dbabb20101923, []int{0}
}
func (m *ChunkPyramidReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChunkPyramidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChunkPyramidReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChunkPyramidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkPyramidReq.Merge(m, src)
}
func (m *ChunkPyramidReq) XXX_Size() int {
	return m.Size()
}
func (m *ChunkPyramidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkPyramidReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkPyramidReq proto.InternalMessageInfo

func (m *ChunkPyramidReq) GetRootCid() []byte {
	if m != nil {
		return m.RootCid
	}
	return nil
}

func (m *ChunkPyramidReq) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

type ChunkPyramidResp struct {
	Chunk []byte `protobuf:"bytes,1,opt,name=Chunk,proto3" json:"Chunk,omitempty"`
	Hash  []byte `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Ok    bool   `protobuf:"varint,3,opt,name=Ok,proto3" json:"Ok,omitempty"`
}

func (m *ChunkPyramidResp) Reset()         { *m = ChunkPyramidResp{} }
func (m *ChunkPyramidResp) String() string { return proto.CompactTextString(m) }
func (*ChunkPyramidResp) ProtoMessage()    {}
func (*ChunkPyramidResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_373dbabb20101923, []int{1}
}
func (m *ChunkPyramidResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChunkPyramidResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChunkPyramidResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChunkPyramidResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkPyramidResp.Merge(m, src)
}
func (m *ChunkPyramidResp) XXX_Size() int {
	return m.Size()
}
func (m *ChunkPyramidResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkPyramidResp.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkPyramidResp proto.InternalMessageInfo

func (m *ChunkPyramidResp) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func (m *ChunkPyramidResp) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ChunkPyramidResp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type ChunkInfoReq struct {
	RootCid []byte `protobuf:"bytes,1,opt,name=RootCid,proto3" json:"RootCid,omitempty"`
	Target  []byte `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Req     []byte `protobuf:"bytes,3,opt,name=req,proto3" json:"req,omitempty"`
}

func (m *ChunkInfoReq) Reset()         { *m = ChunkInfoReq{} }
func (m *ChunkInfoReq) String() string { return proto.CompactTextString(m) }
func (*ChunkInfoReq) ProtoMessage()    {}
func (*ChunkInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_373dbabb20101923, []int{2}
}
func (m *ChunkInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChunkInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChunkInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChunkInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkInfoReq.Merge(m, src)
}
func (m *ChunkInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *ChunkInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkInfoReq proto.InternalMessageInfo

func (m *ChunkInfoReq) GetRootCid() []byte {
	if m != nil {
		return m.RootCid
	}
	return nil
}

func (m *ChunkInfoReq) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ChunkInfoReq) GetReq() []byte {
	if m != nil {
		return m.Req
	}
	return nil
}

type ChunkInfoResp struct {
	RootCid  []byte            `protobuf:"bytes,1,opt,name=RootCid,proto3" json:"RootCid,omitempty"`
	Target   []byte            `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Req      []byte            `protobuf:"bytes,3,opt,name=req,proto3" json:"req,omitempty"`
	Presence map[string][]byte `protobuf:"bytes,4,rep,name=Presence,proto3" json:"Presence,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ChunkInfoResp) Reset()         { *m = ChunkInfoResp{} }
func (m *ChunkInfoResp) String() string { return proto.CompactTextString(m) }
func (*ChunkInfoResp) ProtoMessage()    {}
func (*ChunkInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_373dbabb20101923, []int{3}
}
func (m *ChunkInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChunkInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChunkInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChunkInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkInfoResp.Merge(m, src)
}
func (m *ChunkInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *ChunkInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkInfoResp proto.InternalMessageInfo

func (m *ChunkInfoResp) GetRootCid() []byte {
	if m != nil {
		return m.RootCid
	}
	return nil
}

func (m *ChunkInfoResp) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ChunkInfoResp) GetReq() []byte {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *ChunkInfoResp) GetPresence() map[string][]byte {
	if m != nil {
		return m.Presence
	}
	return nil
}

func init() {
	proto.RegisterType((*ChunkPyramidReq)(nil), "chunkinfo.ChunkPyramidReq")
	proto.RegisterType((*ChunkPyramidResp)(nil), "chunkinfo.ChunkPyramidResp")
	proto.RegisterType((*ChunkInfoReq)(nil), "chunkinfo.ChunkInfoReq")
	proto.RegisterType((*ChunkInfoResp)(nil), "chunkinfo.ChunkInfoResp")
	proto.RegisterMapType((map[string][]byte)(nil), "chunkinfo.ChunkInfoResp.PresenceEntry")
}

func init() { proto.RegisterFile("chunkinfo.proto", fileDescriptor_373dbabb20101923) }

var fileDescriptor_373dbabb20101923 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0xce, 0x28, 0xcd,
	0xcb, 0xce, 0xcc, 0x4b, 0xcb, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0x39, 0x73, 0xf1, 0x3b, 0x83, 0x38, 0x01, 0x95, 0x45, 0x89, 0xb9, 0x99, 0x29, 0x41, 0xa9, 0x85,
	0x42, 0x12, 0x5c, 0xec, 0x41, 0xf9, 0xf9, 0x25, 0xce, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a,
	0x3c, 0x41, 0x30, 0xae, 0x90, 0x18, 0x17, 0x5b, 0x49, 0x62, 0x51, 0x7a, 0x6a, 0x89, 0x04, 0x13,
	0x58, 0x02, 0xca, 0x53, 0xf2, 0xe1, 0x12, 0x40, 0x35, 0xa4, 0xb8, 0x40, 0x48, 0x84, 0x8b, 0x15,
	0x2c, 0x06, 0x35, 0x03, 0xc2, 0x11, 0x12, 0xe2, 0x62, 0xf1, 0x48, 0x2c, 0xce, 0x80, 0xea, 0x07,
	0xb3, 0x85, 0xf8, 0xb8, 0x98, 0xfc, 0xb3, 0x25, 0x98, 0x15, 0x18, 0x35, 0x38, 0x82, 0x98, 0xfc,
	0xb3, 0x95, 0x82, 0xb8, 0x78, 0xc0, 0x8a, 0x3d, 0xf3, 0xd2, 0xf2, 0xc9, 0x72, 0x8f, 0x90, 0x00,
	0x17, 0x73, 0x51, 0x6a, 0x21, 0xd8, 0x48, 0x9e, 0x20, 0x10, 0x53, 0xe9, 0x0a, 0x23, 0x17, 0x2f,
	0x92, 0xa1, 0xc5, 0x05, 0xd4, 0x30, 0x55, 0xc8, 0x89, 0x8b, 0x23, 0xa0, 0x28, 0xb5, 0x38, 0x35,
	0x2f, 0x39, 0x55, 0x82, 0x45, 0x81, 0x59, 0x83, 0xdb, 0x48, 0x4d, 0x0f, 0x11, 0xd6, 0x28, 0xf6,
	0xe9, 0xc1, 0x14, 0xba, 0xe6, 0x95, 0x14, 0x55, 0x06, 0xc1, 0xf5, 0x49, 0x59, 0x73, 0xf1, 0xa2,
	0x48, 0x81, 0xac, 0xc9, 0x4e, 0xad, 0x04, 0x3b, 0x8a, 0x33, 0x08, 0xc4, 0x04, 0x05, 0x65, 0x59,
	0x62, 0x4e, 0x69, 0x2a, 0xd4, 0x3d, 0x10, 0x8e, 0x15, 0x93, 0x05, 0xa3, 0x93, 0xcc, 0x89, 0x47,
	0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85,
	0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x31, 0x15, 0x24, 0x25, 0xb1, 0x81, 0x63, 0xdb,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x5d, 0xbb, 0x4e, 0x00, 0x02, 0x00, 0x00,
}

func (m *ChunkPyramidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkPyramidReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChunkPyramidReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintChunkinfo(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RootCid) > 0 {
		i -= len(m.RootCid)
		copy(dAtA[i:], m.RootCid)
		i = encodeVarintChunkinfo(dAtA, i, uint64(len(m.RootCid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChunkPyramidResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkPyramidResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChunkPyramidResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintChunkinfo(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chunk) > 0 {
		i -= len(m.Chunk)
		copy(dAtA[i:], m.Chunk)
		i = encodeVarintChunkinfo(dAtA, i, uint64(len(m.Chunk)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChunkInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChunkInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Req) > 0 {
		i -= len(m.Req)
		copy(dAtA[i:], m.Req)
		i = encodeVarintChunkinfo(dAtA, i, uint64(len(m.Req)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintChunkinfo(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RootCid) > 0 {
		i -= len(m.RootCid)
		copy(dAtA[i:], m.RootCid)
		i = encodeVarintChunkinfo(dAtA, i, uint64(len(m.RootCid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChunkInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChunkInfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChunkInfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Presence) > 0 {
		for k := range m.Presence {
			v := m.Presence[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintChunkinfo(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintChunkinfo(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintChunkinfo(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Req) > 0 {
		i -= len(m.Req)
		copy(dAtA[i:], m.Req)
		i = encodeVarintChunkinfo(dAtA, i, uint64(len(m.Req)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintChunkinfo(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RootCid) > 0 {
		i -= len(m.RootCid)
		copy(dAtA[i:], m.RootCid)
		i = encodeVarintChunkinfo(dAtA, i, uint64(len(m.RootCid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChunkinfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovChunkinfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChunkPyramidReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RootCid)
	if l > 0 {
		n += 1 + l + sovChunkinfo(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovChunkinfo(uint64(l))
	}
	return n
}

func (m *ChunkPyramidResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chunk)
	if l > 0 {
		n += 1 + l + sovChunkinfo(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovChunkinfo(uint64(l))
	}
	if m.Ok {
		n += 2
	}
	return n
}

func (m *ChunkInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RootCid)
	if l > 0 {
		n += 1 + l + sovChunkinfo(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovChunkinfo(uint64(l))
	}
	l = len(m.Req)
	if l > 0 {
		n += 1 + l + sovChunkinfo(uint64(l))
	}
	return n
}

func (m *ChunkInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RootCid)
	if l > 0 {
		n += 1 + l + sovChunkinfo(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovChunkinfo(uint64(l))
	}
	l = len(m.Req)
	if l > 0 {
		n += 1 + l + sovChunkinfo(uint64(l))
	}
	if len(m.Presence) > 0 {
		for k, v := range m.Presence {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovChunkinfo(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovChunkinfo(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovChunkinfo(uint64(mapEntrySize))
		}
	}
	return n
}

func sovChunkinfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChunkinfo(x uint64) (n int) {
	return sovChunkinfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChunkPyramidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChunkinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkPyramidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkPyramidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootCid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunkinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChunkinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChunkinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootCid = append(m.RootCid[:0], dAtA[iNdEx:postIndex]...)
			if m.RootCid == nil {
				m.RootCid = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunkinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChunkinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChunkinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChunkinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChunkinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChunkPyramidResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChunkinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkPyramidResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkPyramidResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunkinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChunkinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChunkinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunk = append(m.Chunk[:0], dAtA[iNdEx:postIndex]...)
			if m.Chunk == nil {
				m.Chunk = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunkinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChunkinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChunkinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunkinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChunkinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChunkinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChunkInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChunkinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootCid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunkinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChunkinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChunkinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootCid = append(m.RootCid[:0], dAtA[iNdEx:postIndex]...)
			if m.RootCid == nil {
				m.RootCid = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunkinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChunkinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChunkinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunkinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChunkinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChunkinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Req = append(m.Req[:0], dAtA[iNdEx:postIndex]...)
			if m.Req == nil {
				m.Req = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChunkinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChunkinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChunkInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChunkinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChunkInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChunkInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootCid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunkinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChunkinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChunkinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootCid = append(m.RootCid[:0], dAtA[iNdEx:postIndex]...)
			if m.RootCid == nil {
				m.RootCid = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunkinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChunkinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChunkinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunkinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChunkinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChunkinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Req = append(m.Req[:0], dAtA[iNdEx:postIndex]...)
			if m.Req == nil {
				m.Req = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Presence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChunkinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChunkinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChunkinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Presence == nil {
				m.Presence = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChunkinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChunkinfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthChunkinfo
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthChunkinfo
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChunkinfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthChunkinfo
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthChunkinfo
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipChunkinfo(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthChunkinfo
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Presence[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChunkinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChunkinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChunkinfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChunkinfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChunkinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChunkinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChunkinfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChunkinfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChunkinfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChunkinfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChunkinfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChunkinfo = fmt.Errorf("proto: unexpected end of group")
)
